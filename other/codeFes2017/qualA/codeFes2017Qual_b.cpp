#include <iostream>#include <vector>using Graph = std::vector<std::vector<int>>;bool dfs(std::vector<bool> &seen, Graph &g, int vInit, int v, int &edges){    ++edges;    for(auto nextV : g.at(v)){        if(edges < 3){            return dfs(seen, g, vInit, nextV, edges);        }else{            if(g.at(nextV).end() != std::find(g.at(nextV).begin(), g.at(nextV).end(), vInit)){                return false;            }else{                g.at(nextV).push_back(vInit);                return true;            }        }     }}int main(){    int n, m;    std::cin >> n >> m;    Graph g(n);    for(int i = 0; i < m; ++i){        int a, b;        std::cin >> a >> b;        g.at(a - 1).push_back(b - 1);        g.at(b - 1).push_back(a - 1);    }    int count = 0;    std::vector<bool> seen(n, false);    for(int i = 0; i < n; ++i){        int edges = -1;        if(dfs(seen, g, i, i, edges)){            ++count;        }    }    std::cout << count << std::endl;    return 0;}