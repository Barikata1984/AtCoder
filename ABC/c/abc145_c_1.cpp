#include <iostream>#include <iomanip>#include <algorithm>#include <vector>#include <numeric>#include <cmath>int main(){    int n;    std::cin >> n;    std::vector<int> vec(n, 0);    for(int i = 1; i < n; ++i){        vec.at(i) = 1 + vec.at(i - 1);    }    std::vector<std::pair<double, double>> pos(n);    for(int i = 0; i < n; ++i){        double x, y;        std::cin >> x >> y;        pos.at(i) = std::make_pair(x, y);    }    int count = 0;    bool flg = true;    std::vector<double> dists;    while(flg){        double dist = 0;        for(int i = 0; i < n - 1; ++i){            int start = vec.at(i), end = vec.at(i + 1);            double x = pos.at(start).first - pos.at(end).first;             double y = pos.at(start).second - pos.at(end).second;             dist += std::sqrt(std::pow(x, 2) + std::pow(y, 2));        }        dists.push_back(dist);        flg = std::next_permutation(vec.begin(), vec.end());    }    std::cout << std::fixed << std::setprecision(7);    std::cout << std::accumulate(dists.begin(), dists.end(), 0.0) / dists.size();    std::cout << std::endl;    return 0;}