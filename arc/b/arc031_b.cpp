#include <iostream>#include <vector>std::vector<int> dx{1, 0, -1, 0}, dy{0, 1, 0, -1};void dfs(std::vector<std::vector<bool>> &seen, std::vector<std::string> &map, int x, int y){    seen.at(y).at(x) = true;    for(int i = 0; i < 4; ++i){        int nextX = x + dx.at(i), nextY = y + dy.at(i);        if('x' == map.at(nextY).at(nextX) || seen.at(nextY).at(nextX)){            continue;        }//        std::cout << nextX << ", " << nextY << std::endl;                dfs(seen, map, nextX, nextY);    } }int main(){    std::vector<std::string> map(12, std::string(12, 'x'));    std::vector<int> seaX, seaY;    for(int j = 1; j <= 10; ++j){        std::string str;        std::cin >> str;        for(int i = 1; i <= 10; ++i){            map.at(j).at(i) = str.at(i - 1);            if('x' == map.at(j).at(i)){                seaX.push_back(i);                seaY.push_back(j);            }        }    }        int n = seaX.size();    for(int i = 0; i < n; ++i){        map.at(seaY.at(i)).at(seaX.at(i)) = 'o';                int count = 0;        std::vector<std::vector<bool>> seen(12, std::vector<bool>(12, false));        for(int j = 1; j <= 10; ++j){            for(int i = 1; i <= 10; ++i){                if('x' == map.at(j).at(i) || seen.at(j).at(i)){                    continue;                }                ++count;                dfs(seen, map, i, j);            }        }        if(1 == count){            std::cout << "YES" << std::endl;            return 0;        }else{            map.at(seaY.at(i)).at(seaX.at(i)) = 'x';        }    }    std::cout << "NO" << std::endl;    return 0;}